import { Entity, PrimaryGeneratedColumn, Column } from "typeorm";

@Entity()
export class Tenant {
  @PrimaryGeneratedColumn()
  id!: number;

  @Column()
  name!: string;

  @Column()
  apartment_id!: string;
}
// This entity represents a tenant in the database. It includes the following fields:
// - id: A unique identifier for the tenant, automatically generated by the database.
// - name: The name of the tenant, stored as a string.
// - apartment_id: The ID of the apartment associated with the tenant, stored as a string.
// This entity can be used to manage tenant information in a rental application, for example.
// It can be used to create, read, update, and delete tenant records in the database.
// The `@Entity()` decorator marks this class as a database entity, and the `@Column()` decorators define the properties that will be stored in the database.
// The `@PrimaryGeneratedColumn()` decorator indicates that the `id` field is the primary key and will be automatically generated by the database.
// The `Tenant` entity can be used in conjunction with a GraphQL resolver to provide a complete API for managing tenant information.
// The resolver can handle queries and mutations for creating, updating, and deleting tenant records,
// as well as retrieving tenant information based on various criteria.
// This entity can be extended with additional fields or relationships to other entities as needed.
// For example, you could add a relationship to an `Apartment` entity to represent the association between tenants and apartments.
// You could also add validation or transformation logic to ensure that the data being stored in the database is valid and consistent.
// This could include checks for required fields, data types, and other constraints.
// Overall, the `Tenant` entity provides a simple and flexible way to manage tenant information in a rental application.
// It can be easily extended and customized to meet the specific needs of your application.
// The `Tenant` entity can be used in conjunction with a GraphQL resolver to provide a complete API for managing tenant information.
